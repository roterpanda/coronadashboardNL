/*!
 * Copyright (c) 2017 ~ present NAVER Corp.
 * billboard.js project is licensed under the MIT license
 * 
 * billboard.js, JavaScript chart library
 * https://naver.github.io/billboard.js/
 * 
 * @version 2.0.2
 * @requires billboard.js
 * @summary billboard.js plugin
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3-selection"),require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-brush"),require("d3-axis"),require("d3-format")):"function"==typeof define&&define.amd?define("stanford",["d3-selection","d3-interpolate","d3-color","d3-scale","d3-brush","d3-axis","d3-format"],e):"object"==typeof exports?exports.stanford=e(require("d3-selection"),require("d3-interpolate"),require("d3-color"),require("d3-scale"),require("d3-brush"),require("d3-axis"),require("d3-format")):(t.bb=t.bb||{},t.bb.plugin=t.bb.plugin||{},t.bb.plugin.stanford=e(t.d3,t.d3,t.d3,t.d3,t.d3,t.d3,t.d3))}(this,(function(t,e,n,r,i,o,a){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=16)}([,function(t,e,n){"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.d(e,"a",(function(){return r}))},function(t,e,n){"use strict";function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.d(e,"a",(function(){return r}))},function(e,n){e.exports=t},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(3),i=function(){function t(t){void 0===t&&(t={}),Object(r.a)(this,"$$",void 0),Object(r.a)(this,"options",void 0),this.options=t}var e=t.prototype;return e.$beforeInit=function(){},e.$init=function(){},e.$afterInit=function(){},e.$redraw=function(){},e.$willDestroy=function(){var t=this;Object.keys(this).forEach((function(e){t[e]=null,delete t[e]}))},t}();Object(r.a)(i,"version","2.0.2")},function(t,n){t.exports=e},function(t,e){t.exports=n},function(t,e){t.exports=r},function(t,e,n){"use strict";e.a={arc:"bb-arc",arcLabelLine:"bb-arc-label-line",arcs:"bb-arcs",area:"bb-area",areas:"bb-areas",axis:"bb-axis",axisX:"bb-axis-x",axisXLabel:"bb-axis-x-label",axisY:"bb-axis-y",axisY2:"bb-axis-y2",axisY2Label:"bb-axis-y2-label",axisYLabel:"bb-axis-y-label",bar:"bb-bar",bars:"bb-bars",brush:"bb-brush",button:"bb-button",buttonZoomReset:"bb-zoom-reset",chart:"bb-chart",chartArc:"bb-chart-arc",chartArcs:"bb-chart-arcs",chartArcsBackground:"bb-chart-arcs-background",chartArcsGaugeMax:"bb-chart-arcs-gauge-max",chartArcsGaugeMin:"bb-chart-arcs-gauge-min",chartArcsGaugeUnit:"bb-chart-arcs-gauge-unit",chartArcsTitle:"bb-chart-arcs-title",chartArcsGaugeTitle:"bb-chart-arcs-gauge-title",chartBar:"bb-chart-bar",chartBars:"bb-chart-bars",chartCircles:"bb-chart-circles",chartLine:"bb-chart-line",chartLines:"bb-chart-lines",chartRadar:"bb-chart-radar",chartRadars:"bb-chart-radars",chartText:"bb-chart-text",chartTexts:"bb-chart-texts",circle:"bb-circle",circles:"bb-circles",colorPattern:"bb-color-pattern",colorScale:"bb-colorscale",defocused:"bb-defocused",dragarea:"bb-dragarea",empty:"bb-empty",eventRect:"bb-event-rect",eventRects:"bb-event-rects",eventRectsMultiple:"bb-event-rects-multiple",eventRectsSingle:"bb-event-rects-single",focused:"bb-focused",gaugeValue:"bb-gauge-value",grid:"bb-grid",gridLines:"bb-grid-lines",legend:"bb-legend",legendBackground:"bb-legend-background",legendItem:"bb-legend-item",legendItemEvent:"bb-legend-item-event",legendItemFocused:"bb-legend-item-focused",legendItemHidden:"bb-legend-item-hidden",legendItemPoint:"bb-legend-item-point",legendItemTile:"bb-legend-item-tile",level:"bb-level",levels:"bb-levels",line:"bb-line",lines:"bb-lines",main:"bb-main",region:"bb-region",regions:"bb-regions",selectedCircle:"bb-selected-circle",selectedCircles:"bb-selected-circles",shape:"bb-shape",shapes:"bb-shapes",stanfordElements:"bb-stanford-elements",stanfordLine:"bb-stanford-line",stanfordLines:"bb-stanford-lines",stanfordRegion:"bb-stanford-region",stanfordRegions:"bb-stanford-regions",subchart:"bb-subchart",target:"bb-target",text:"bb-text",texts:"bb-texts",title:"bb-title",tooltip:"bb-tooltip",tooltipContainer:"bb-tooltip-container",tooltipName:"bb-tooltip-name",xgrid:"bb-xgrid",xgridFocus:"bb-xgrid-focus",xgridLine:"bb-xgrid-line",xgridLines:"bb-xgrid-lines",xgrids:"bb-xgrids",ygrid:"bb-ygrid",ygridFocus:"bb-ygrid-focus",ygridLine:"bb-ygrid-line",ygridLines:"bb-ygrid-lines",ygrids:"bb-ygrids",zoomBrush:"bb-zoom-brush",EXPANDED:"_expanded_",SELECTED:"_selected_",INCLUDED:"_included_",TextOverlapping:"text-overlapping"}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(18);function i(t){var e,n,i,o=this.config,a=function(){var t=n.shift();return t&&e&&Object(r.e)(e)&&t in e?(e=e[t],a()):t?void 0:e};Object.keys(o).forEach((function(c){e=t,n=c.split("_"),i=a(),Object(r.b)(i)&&(o[c]=i)}))}},function(t,e){t.exports=i},function(t,e){t.exports=o},function(t,e){t.exports=a},,,function(t,e,n){"use strict";n.r(e),n.d(e,"default",(function(){return $}));var r=n(1),i=n(2),o=n(3),a=n(6),c=n(7),s=n(8),l=n(9),u=n(10),b=n(5),d=function(){return{colors:void 0,epochs:[],lines:[],scale_min:void 0,scale_max:void 0,scale_width:20,scale_format:void 0,padding_top:0,padding_right:0,padding_bottom:0,padding_left:0,regions:[]}},f="bb-colorscale",h="bb-stanford-elements",p="bb-stanford-line",g="bb-stanford-lines",x="bb-stanford-region",v="bb-stanford-regions",m=n(18);function y(t,e){return t.epochs<e.epochs?-1:t.epochs>e.epochs?1:0}function j(t){for(var e,n=function(t){for(var e,n,r=0,i=0,o=t.length,a=o-1;i<o;a=i,i++)e=t[i],n=t[a],r+=e.x*n.y,r-=e.y*n.x;return r/=2}(t),r=0,i=0,o=0,a=t.length,c=a-1;o<a;c=o,o++){var s=t[o],l=t[c];e=s.x*l.y-l.x*s.y,r+=(s.x+l.x)*e,i+=(s.y+l.y)*e}return{x:r/(e=6*n),y:i/e}}var _=function(){function t(t){Object(o.a)(this,"owner",void 0),this.owner=t;var e=t.$$.$el.main.select(".bb-chart").append("g").attr("class",h);e.append("g").attr("class",g),e.append("g").attr("class",v)}var e=t.prototype;return e.updateStanfordLines=function(t){var e=this.owner.$$,n=e.config,r=e.$el.main,i=n.axis_rotated,o=this.xvCustom.bind(e),a=this.yvCustom.bind(e),c=r.select("."+g).style("shape-rendering","geometricprecision").selectAll("."+p).data(this.owner.config.lines);c.exit().transition().duration(t).style("opacity","0").remove();var s=c.enter().append("g");s.append("line").style("opacity","0"),s.merge(c).attr("class",(function(t){return p+(t.class?" "+t.class:"")})).select("line").transition().duration(t).attr("x1",(function(t){return i?a(t,"y1"):o(t,"x1")})).attr("x2",(function(t){return i?a(t,"y2"):o(t,"x2")})).attr("y1",(function(t){return i?o(t,"x1"):a(t,"y1")})).attr("y2",(function(t){return i?o(t,"x2"):a(t,"y2")})).transition().style("opacity","1")},e.updateStanfordRegions=function(t){var e=this.owner.$$,n=e.config,r=e.$el.main,i=n.axis_rotated,o=this.xvCustom.bind(e),a=this.yvCustom.bind(e),c=this.owner.countEpochsInRegion.bind(e),s=r.select("."+v).selectAll("."+x).data(this.owner.config.regions);s.exit().transition().duration(t).style("opacity","0").remove();var l=s.enter().append("g");l.append("polygon").style("opacity","0"),l.append("text").attr("transform",i?"rotate(-90)":"").style("opacity","0"),(s=l.merge(s)).attr("class",(function(t){return x+(t.class?" "+t.class:"")})).select("polygon").transition().duration(t).attr("points",(function(t){return t.points.map((function(t){return[i?a(t,"y"):o(t,"x"),i?o(t,"x"):a(t,"y")].join(",")})).join(" ")})).transition().style("opacity",(function(t){return(t.opacity?t.opacity:.2)+""})),s.select("text").transition().duration(t).attr("x",(function(t){return i?a(j(t.points),"y"):o(j(t.points),"x")})).attr("y",(function(t){return i?o(j(t.points),"x"):a(j(t.points),"y")})).text((function(t){if(t.text){var e=c(t.points),n=e.value,r=e.percentage;return t.text(n,r)}return""})).attr("text-anchor","middle").attr("dominant-baseline","middle").transition().style("opacity","1")},e.updateStanfordElements=function(t){void 0===t&&(t=0),this.updateStanfordLines(t),this.updateStanfordRegions(t)},e.xvCustom=function(t,e){var n=this,r=n.axis,i=n.config,o=e?t[e]:n.getBaseValue(t);return r.isTimeSeries()?o=m.g.call(n,o):r.isCategorized()&&Object(m.f)(o)&&(o=i.axis_x_categories.indexOf(t.value)),Math.ceil(n.scale.x(o))},e.yvCustom=function(t,e){var n=t.axis&&"y2"===t.axis?this.scale.y2:this.scale.y,r=e?t[e]:this.getBaseValue(t);return Math.ceil(n(r))},t}(),S=n(12),O=n(13),w=function(){function t(t){Object(o.a)(this,"owner",void 0),Object(o.a)(this,"colorScale",void 0),this.owner=t}var e=t.prototype;return e.drawColorScale=function(){var t=this.owner,e=t.$$,n=t.config,r=e.data.targets[0],i=e.state.height-n.padding_bottom-n.padding_top,o=n.scale_width,a=Object(m.a)(n.padding_bottom,i,5),c=Object(s.scaleSequential)(r.colors).domain([a[a.length-1],a[0]]);this.colorScale&&this.colorScale.remove(),this.colorScale=e.$el.svg.append("g").attr("width",50).attr("height",i).attr("class",f),this.colorScale.append("g").attr("transform","translate(0, "+n.padding_top+")").selectAll("bars").data(a).enter().append("rect").attr("y",(function(t,e){return 5*e})).attr("x",0).attr("width",o).attr("height",5).attr("fill",(function(t){return c(t)}));var l=Object(s.scaleLog)().domain([r.minEpochs,r.maxEpochs]).range([a[0]+n.padding_top+a[a.length-1]+5-1,a[0]+n.padding_top]),u=Object(S.axisRight)(l),b=n.scale_format;"pow10"===b?u.tickValues([1,10,100,1e3,1e4,1e5,1e6,1e7]):Object(m.d)(b)?u.tickFormat(b):u.tickFormat(Object(O.format)("d"));var d=this.colorScale.append("g").attr("class","legend axis").attr("transform","translate("+o+",0)").call(u);"pow10"===b&&d.selectAll(".tick text").text(null).filter((function(t){return t/Math.pow(10,Math.ceil(Math.log(t)/Math.LN10-1e-12))==1})).text(10).append("tspan").attr("dy","-.7em").text((function(t){return Math.round(Math.log(t)/Math.LN10)})),this.colorScale.attr("transform","translate("+(e.state.current.width-this.xForColorScale())+", 0)")},e.xForColorScale=function(){return this.owner.config.padding_right+this.colorScale.node().getBBox().width},e.getColorScalePadding=function(){return this.xForColorScale()+this.owner.config.padding_left+20},t}(),$=function(t){function e(e){var n;return n=t.call(this,e)||this,Object(o.a)(Object(r.a)(n),"config",void 0),Object(o.a)(Object(r.a)(n),"colorScale",void 0),Object(o.a)(Object(r.a)(n),"elements",void 0),n.config=new d,Object(r.a)(n)||Object(r.a)(n)}Object(i.a)(e,t);var n=e.prototype;return n.$beforeInit=function(){var t=this,e=this.$$;e.config.data_xSort=!1,e.isMultipleX=function(){return!0},e.showGridFocus=function(){},e.labelishData=function(t){return t.values},e.opacityForCircle=function(){return 1};var n=e.getCurrentPaddingRight.bind(e);e.getCurrentPaddingRight=function(){return n()+(t.colorScale?t.colorScale.getColorScalePadding():0)}},n.$init=function(){var t=this.$$;u.a.call(this,this.options),t.color=this.getStanfordPointColor.bind(t),this.colorScale=new w(this),this.elements=new _(this),this.convertData(),this.initStanfordData(),this.setStanfordTooltip(),this.colorScale.drawColorScale(),this.$redraw()},n.$redraw=function(t){this.colorScale&&this.colorScale.drawColorScale(),this.elements&&this.elements.updateStanfordElements(t)},n.getOptions=function(){return new d},n.convertData=function(){var t=this.$$.data.targets,e=this.options.epochs;t.forEach((function(t){t.values.forEach((function(t,n){t.epochs=e[n]})),t.minEpochs=void 0,t.maxEpochs=void 0,t.colors=void 0,t.colorscale=void 0}))},n.xvCustom=function(t,e){var n=this,r=n.axis,i=n.config,o=e?t[e]:n.getBaseValue(t);return r.isTimeSeries()?o=m.g.call(n,o):r.isCategorized()&&Object(m.f)(o)&&(o=i.axis_x_categories.indexOf(t.value)),Math.ceil(n.scale.x(o))},n.yvCustom=function(t,e){var n=this.scale,r=t.axis&&"y2"===t.axis?n.y2:n.y,i=e?t[e]:this.getBaseValue(t);return Math.ceil(r(i))},n.initStanfordData=function(){var t=this.config,e=this.$$.data.targets[0];e.values.sort(y);var n=e.values.map((function(t){return t.epochs}));e.minEpochs=isNaN(t.scale_min)?Math.min.apply(Math,n):t.scale_min,e.maxEpochs=isNaN(t.scale_max)?Math.max.apply(Math,n):t.scale_max,e.colors=Object(m.d)(t.colors)?t.colors:Object(a.interpolateHslLong)(Object(c.hsl)(250,1,.5),Object(c.hsl)(0,1,.5)),e.colorscale=Object(s.scaleSequentialLog)(e.colors).domain([e.minEpochs,e.maxEpochs])},n.getStanfordPointColor=function(t){return this.data.targets[0].colorscale(t.epochs)},n.setStanfordTooltip=function(){var t=this.$$.config;Object(m.c)(t.tooltip_contents)&&(t.tooltip_contents=function(e,n,r,i){var o='<table class="'+l.a.tooltip+'"><tbody>';return e.forEach((function(e){o+="<tr>\n\t\t\t\t\t\t\t<th>"+n(t.data_x)+'</th>\n\t\t\t\t\t\t\t<th class="value">'+r(e.x)+"</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>"+n(e.id)+'</th>\n\t\t\t\t\t\t\t<th class="value">'+r(e.value)+'</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr class="'+l.a.tooltipName+"-"+e.id+'">\n\t\t\t\t\t\t\t<td class="name"><span style="background-color:'+i(e)+'"></span>'+n("Epochs")+'</td>\n\t\t\t\t\t\t\t<td class="value">'+r(e.epochs)+"</td>\n\t\t\t\t\t\t</tr>"})),o+"</tbody></table>"})},n.countEpochsInRegion=function(t){var e=this.data.targets[0],n=e.values.reduce((function(t,e){return t+ +e.epochs}),0),r=e.values.reduce((function(e,n){return function(t,e){for(var n=t.x,r=t.value,i=!1,o=0,a=e.length-1;o<e.length;a=o++){var c=e[o].x,s=e[o].y,l=e[a].x,u=e[a].y;s>r!=u>r&&n<(l-c)*(r-s)/(u-s)+c&&(i=!i)}return i}(n,t)?e+ +n.epochs:e}),0);return{value:r,percentage:0===r?0:+(r/n*100).toFixed(1)}},e}(b.a)},,function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"c",(function(){return b})),n.d(e,"d",(function(){return a})),n.d(e,"e",(function(){return u})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return f}));n(3),n(4),n(11);var r,i=(r=function(t){return void 0!==t&&t})(self)||r(window)||r(global)||r(globalThis)||Function("return this")(),o=i&&i.document;n(9);var a=function(t){return"function"==typeof t},c=function(t){return"string"==typeof t},s=function(t){return"number"==typeof t},l=function(t){return void 0!==t},u=function(t){return"object"==typeof t},b=function(t){return void 0===t||null===t||c(t)&&0===t.length||u(t)&&!(t instanceof Date)&&0===Object.keys(t).length||s(t)&&isNaN(t)};var d=function(t,e,n){void 0===n&&(n=1);for(var r=[],i=0|Math.max(0,Math.ceil((e-t)/n)),o=t;o<i;o++)r.push(t+o*n);return r};!function(){try{new MouseEvent("t")}catch(t){return function(t,e,n){void 0===n&&(n={bubbles:!1,cancelable:!1,screenX:0,screenY:0,clientX:0,clientY:0});var r=o.createEvent("MouseEvent");r.initMouseEvent(e,n.bubbles,n.cancelable,i,0,n.screenX,n.screenY,n.clientX,n.clientY,!1,!1,!1,!1,0,null),t.dispatchEvent(r)}}}();function f(t){var e;if(t instanceof Date)e=t;else if(c(t)){var n=this.config;e=this.format.dataTime(n.data_xFormat)(t)}else s(t)&&!isNaN(t)&&(e=new Date(+t));return(!e||isNaN(+e))&&console&&console.error&&console.error("Failed to parse x '"+t+"' to Date object"),e}}]).default}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,